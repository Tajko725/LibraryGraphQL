schema {
  query: Query
  mutation: Mutation
}

"Reprezentuje książkę w bibliotece."
type Book {
  "Unikalny identyfikator książki."
  id: Int!
  "Tytuł książki."
  title: String!
  "Rok wydania książki."
  year: Int!
  "Autor tej książki."
  author: Author!
}

"Reprezentuje autora książek."
type Author {
  "Unikalny identyfikator autora."
  id: Int!
  "Imię i nazwisko autora."
  name: String!
  "Lista książek napisanych przez tego autora."
  books: [Book!]!
}

type Query {
  books: [Book!]!
  bookById(id: Int!): Book
  authors: [Author!]!
}

type Mutation {
  addBook(title: String! year: Int! authorId: Int!): Book!
  addAuthor(name: String!): Author!
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION